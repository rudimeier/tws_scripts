#!/bin/bash
#
# tws: - comfortable shell script for running TWS
#
# usage: - set your paths in config section below
#        - see --help
#
# Copyright (C) 2011 Ruediger Meier <sweet_f_a@gmx.de>
# License: BSD 3-Clause


#### config section

TWS_HOME="${HOME}/.tws"
TWS_DIR="/opt/TWS/IBJts"
IBController_DIR="/opt/TWS/IBController"


#### defaults, don't change!

GATEWAY="0"
JAVA_OPTS=""
CONTROLLER="0"
PATCHED="0"
LOOP="0"
DRYRUN="0"

MYNAME="$0"

#### funcs

_error()
{
    echo "error $MYNAME: $1" 1>&2
    exit 1
}

_print_usage()
{
	cat <<EOF
Usage: $0  [--gw] [--javaopts OPTIONS] [-c|--controller] \
[--loop] [--tws TWS_DIR] [--test] [--] [TWS_HOME]
EOF
}

_parse_cmd()
{
	local TEMP
	TEMP=$(getopt -o cph \
		--long gw,javaopts:,controller,patched,loop,tws:,test,help \
		-n "$0" -- "$@" \
		) || exit 1
	eval set -- "$TEMP"

	while true ; do
	case "$1" in
		--gw)
			GATEWAY="1"; shift;;
		--javaopts)
			JAVA_OPTS="$2"; shift 2;;
		-c|--controller)
			CONTROLLER="1"; shift;;
		-p|--patched)
			_error "option --patched has been disabled";;
		--loop)
			LOOP="1"; shift 1;;
		--tws)
			TWS_DIR="$(readlink -f "$2")"; shift 2;;
		--test)
			DRYRUN="1"; shift 1;;
		--help)
			_print_usage; exit 0;;
		--)
			shift ; break ;;
		*)
			_error "internal getopt error";;
		esac
	done

	#Remaining arguments:
	if test "$#" -gt 1  ;then
		_error "bad usage"
	elif test "$#" -gt 0  ;then
		TWS_HOME="$1"
	fi

	LOGFILE="${TWS_HOME}/tws-restart.log"
	S_PIDFILE="${TWS_HOME}/tws-script.pid"
	J_PIDFILE="${TWS_HOME}/tws-java.pid"
}

_kill_java()
{
	local jpid

	if test -f "$J_PIDFILE"; then
		jpid=$(<"$J_PIDFILE")
		kill -TERM "$jpid"
	fi
}

_atkill()
{
	local excode=$?

	_kill_java

	rm -f "$J_PIDFILE"
	if test ${LOOP} = 0 ;then
		echo_log "tws exit code $?"
	else
		echo_log "tws stop loop $excode"
	fi
	exit $excode
}

_atexit()
{
	rm -f "$S_PIDFILE"
}

echo_log()
{
	local now=`date "+%F %T"`
	echo -e "${now}: $@" |tee -a "${LOGFILE}" >&2
}

xeval()
{
	local tws_pid
	local tws_exit_code

	"$@" &
	tws_pid="$!"
	echo  "$tws_pid" > "$J_PIDFILE"
	echo_log "tws started, PID ${tws_pid}"
	wait "${tws_pid}"
	tws_exit_code=$?
	rm "$J_PIDFILE"
	return $tws_exit_code
}

eval_loop()
{
	if test ${LOOP} = 0 ;then
		xeval "$@"
		echo_log "tws exit code $?"
	else
		local i="0";
		while true; do
			echo_log "tws start loop $i"
			xeval "$@"
			echo_log "tws exit code $? ... will be restarted"
			i="$(( i+1 ))"
			sleep 5
		done
	fi
}

_java_exec()
{
	if [ "${DRYRUN}" = "1" ] ;then
		echo "CONTROLLER='${CONTROLLER}'"
		echo "IBController_DIR='${IBController_DIR}'"
		echo "TWS_DIR='${TWS_DIR}'"
		echo "TWS_HOME='${TWS_HOME}'"
		echo "CLASSPATH='${CLASSPATH}'"
		echo "java ${JAVA_OPTS} -cp '${CLASSPATH}' $@"
	else
		eval_loop java ${JAVA_OPTS} -cp "${CLASSPATH}" "$@"
	fi
}

# We have to provide jts.ini with "SettingsDir" in case we don't use IBContoller
_check_jts_ini()
{
	local jtsini="$TWS_HOME/jts.ini"

	# provide CRLF line feeds
	if ! test -f "$jtsini" || ! grep -q "^\[Communication\]" "$jtsini"; then
		sed 's/$/\r/' >>"$jtsini" <<EOF
[Communication]
SettingsDir=$TWS_HOME

EOF
		return
	fi

	sed -i.bak \
		-e '/^SettingsDir=/d' \
		-e 's@\(\[Communication\]\)@\1\r\nSettingsDir='$TWS_HOME'@' \
		"$jtsini"
}

#### here we go

_parse_cmd "$@"

trap _kill_java HUP
trap _atkill TERM INT QUIT PIPE
trap _atexit EXIT

if ! test -d  "${TWS_DIR}" ;then
	_error "invalid TWS_DIR: '${TWS_DIR}'"
fi
if ! test -d  "${TWS_HOME}" ;then
	_error "invalid TWS_HOME: '${TWS_HOME}'"
fi

cd "${TWS_HOME}" || exit 1
echo "$$" > "$S_PIDFILE" || exit 1

#getting classpath
CLASSPATH="$TWS_DIR/*"

_check_jts_ini
if [ "${CONTROLLER}" = 1 ] ;then
	temp=""
	if ! temp="$(sed '/^IbDir=\.\r\{0,1\}$/!d' IBController.ini 2>/dev/null)" ;then
		_error "${TWS_HOME}/IBController.ini not found"
	fi
	if test -z "${temp}" ;then
		_error "${TWS_HOME}/IBController.ini must contain 'IbDir=.'"
	fi
	CLASSPATH="${IBController_DIR}/IBController.jar:${CLASSPATH}"
	if [ "${GATEWAY}" = 1 ] ;then
		_java_exec ibcontroller.IBGatewayController ./IBController.ini
	else
		_java_exec ibcontroller.IBController ./IBController.ini
	fi
else
	if [ "${GATEWAY}" = 1 ] ;then
		_java_exec ibgateway.GWClient .
	else
		_java_exec jclient.LoginFrame .
	fi
fi
