#!/bin/bash
export LANG="C"

MAIL_SUBJECT="TWS download"
# set up email address if you want to be informed about updates
FROM_ADDRESS=""
TO_ADDRESS=""

DOWNLOAD_DIR="/var/lib/software/commercial/IB/TWS"

BASE_URL="https://download2.interactivebrokers.com/installers"
URLS_TO_MIRROR="
	${BASE_URL}/tws/stable/tws-stable-linux-x64.sh
	${BASE_URL}/tws/latest/tws-latest-linux-x64.sh
	${BASE_URL}/tws/beta/tws-beta-linux-x64.sh
	${BASE_URL}/tws/stable-standalone/tws-stable-standalone-linux-x64.sh
	${BASE_URL}/tws/latest-standalone/tws-latest-standalone-linux-x64.sh
	${BASE_URL}/ibgateway/stable-standalone/ibgateway-stable-standalone-linux-x64.sh
	${BASE_URL}/ibgateway/latest-standalone/ibgateway-latest-standalone-linux-x64.sh
"

# use "tws_get_version" from the same directory as this scripts
TWS_GET_VERSION="$(dirname "$(readlink -f "$0")")/tws_get_version"

err_exit()
{
	echo "error: $1" 1>&2
	exit 1
}

get_perm_file_name()
{
	local ver;
	local dst;
	ver="$("$TWS_GET_VERSION" "$1" || date -r "$1" +"unknown%Y%m%d%H%M%S")"
	dst="$(echo "$1" | sed -e "s/\(.*\)\.\(.*\)/\1-${ver}.\2/g" -e 's/_latest//g')"
	echo "${dst}"
}

if ! test -d "${DOWNLOAD_DIR}" ;then
	err_exit "${DOWNLOAD_DIR} does not exist"
fi

TDIR="$(mktemp -d -t twsdl.XXXX)" || err_exit "fatal"
trap "rm -rf ${TDIR}" exit
cd "${TDIR}" || err_exit "fatal"

for URL in $URLS_TO_MIRROR; do
	FILE_MIRROR="$(basename "${URL}")"
	FILE_CUR="${DOWNLOAD_DIR}/${FILE_MIRROR}"

	# create fake sparse file for wget because wget -K is broken and -O file
	# conflicts with -N
	if test -f "${FILE_CUR}" ; then
		truncate -r "${FILE_CUR}" "${FILE_MIRROR}"
		touch -r "${FILE_CUR}" "${FILE_MIRROR}"
	fi

	if wget --no-verbose -U "Mozilla/5.0" -N -P "${TDIR}" "${URL}" ;then
		if test "${FILE_MIRROR}" -nt "${FILE_CUR}" ; then
			DST="$(get_perm_file_name "${FILE_MIRROR}")"
			DSTP="${DOWNLOAD_DIR}/${DST}"
			if test -f "$DSTP"; then
				# keep duplicate versioned files for later debugging
				mv "$DSTP" "$DSTP-$(date -r "$DSTP" +"dup%Y%m%d%H%M%S")"
			fi
			mv "${FILE_MIRROR}" "$DSTP"
			ln -sf "${DST}" "${FILE_CUR}"
			WARN=1
			MAIL_SUBJECT="${MAIL_SUBJECT}, updated ${DST}"
			echo "${FILE_MIRROR} updated to ${DST}" 1>&2
		else
			echo "${FILE_MIRROR} was uptodate" 1>&2
		fi
	else
		echo "check for ${FILE_MIRROR} update failed" 1>&2
		WARN=1;
		MAIL_SUBJECT="${MAIL_SUBJECT}, check ${FILE_MIRROR} failed"
	fi
done

if test -n "$WARN" && test -n "$TO_ADDRESS"; then
	echo "send mail: $MAIL_SUBJECT" 1>&2
	ls -l "${DOWNLOAD_DIR}" \
		| mailx -s "$MAIL_SUBJECT" -r $FROM_ADDRESS $TO_ADDRESS
fi


